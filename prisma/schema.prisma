// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  firstName          String
  lastName           String
  password           String?
  profilePicture     String?
  createdAt          DateTime            @default(now())
  drinks             Drink[]
  rooms              RoomUser[]
  refreshToken       String?
  PasswordResetToken PasswordResetToken?
}

model DrinkType {
  id     String  @id @default(uuid())
  name   String  @unique
  slug   String  @unique
  drinks Drink[]
}

model Drink {
  id             String    @id @default(uuid())
  litersConsumed Float
  drinkDate      DateTime
  customType     String?
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  drinkTypeId    String
  drinkType      DrinkType @relation(fields: [drinkTypeId], references: [id], onDelete: Cascade)
}

model Room {
  id      String     @id @default(uuid())
  slug    String     @unique
  title   String
  adminId String
  users   RoomUser[]
}

model RoomUser {
  id     String @id @default(uuid())
  userId String
  roomId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
